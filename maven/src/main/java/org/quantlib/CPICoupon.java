/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

import java.lang.AutoCloseable;

public class CPICoupon extends InflationCoupon implements AutoCloseable {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected CPICoupon(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.CPICoupon_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CPICoupon obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwnDerived = own;
    super.swigSetCMemOwn(own);
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        QuantLibJNI.delete_CPICoupon(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  @Override
  public void close() {
   this.delete();
  }

  public CPICoupon(double baseCPI, Date paymentDate, double nominal, Date startDate, Date endDate, long fixingDays, ZeroInflationIndex index, Period observationLag, CPI.InterpolationType observationInterpolation, DayCounter dayCounter, double fixedRate, double spread, Date refPeriodStart, Date refPeriodEnd, Date exCouponDate) {
    this(QuantLibJNI.new_CPICoupon__SWIG_0(baseCPI, Date.getCPtr(paymentDate), paymentDate, nominal, Date.getCPtr(startDate), startDate, Date.getCPtr(endDate), endDate, fixingDays, ZeroInflationIndex.getCPtr(index), index, Period.getCPtr(observationLag), observationLag, observationInterpolation.swigValue(), DayCounter.getCPtr(dayCounter), dayCounter, fixedRate, spread, Date.getCPtr(refPeriodStart), refPeriodStart, Date.getCPtr(refPeriodEnd), refPeriodEnd, Date.getCPtr(exCouponDate), exCouponDate), true);
  }

  public CPICoupon(double baseCPI, Date paymentDate, double nominal, Date startDate, Date endDate, long fixingDays, ZeroInflationIndex index, Period observationLag, CPI.InterpolationType observationInterpolation, DayCounter dayCounter, double fixedRate, double spread, Date refPeriodStart, Date refPeriodEnd) {
    this(QuantLibJNI.new_CPICoupon__SWIG_1(baseCPI, Date.getCPtr(paymentDate), paymentDate, nominal, Date.getCPtr(startDate), startDate, Date.getCPtr(endDate), endDate, fixingDays, ZeroInflationIndex.getCPtr(index), index, Period.getCPtr(observationLag), observationLag, observationInterpolation.swigValue(), DayCounter.getCPtr(dayCounter), dayCounter, fixedRate, spread, Date.getCPtr(refPeriodStart), refPeriodStart, Date.getCPtr(refPeriodEnd), refPeriodEnd), true);
  }

  public CPICoupon(double baseCPI, Date paymentDate, double nominal, Date startDate, Date endDate, long fixingDays, ZeroInflationIndex index, Period observationLag, CPI.InterpolationType observationInterpolation, DayCounter dayCounter, double fixedRate, double spread, Date refPeriodStart) {
    this(QuantLibJNI.new_CPICoupon__SWIG_2(baseCPI, Date.getCPtr(paymentDate), paymentDate, nominal, Date.getCPtr(startDate), startDate, Date.getCPtr(endDate), endDate, fixingDays, ZeroInflationIndex.getCPtr(index), index, Period.getCPtr(observationLag), observationLag, observationInterpolation.swigValue(), DayCounter.getCPtr(dayCounter), dayCounter, fixedRate, spread, Date.getCPtr(refPeriodStart), refPeriodStart), true);
  }

  public CPICoupon(double baseCPI, Date paymentDate, double nominal, Date startDate, Date endDate, long fixingDays, ZeroInflationIndex index, Period observationLag, CPI.InterpolationType observationInterpolation, DayCounter dayCounter, double fixedRate, double spread) {
    this(QuantLibJNI.new_CPICoupon__SWIG_3(baseCPI, Date.getCPtr(paymentDate), paymentDate, nominal, Date.getCPtr(startDate), startDate, Date.getCPtr(endDate), endDate, fixingDays, ZeroInflationIndex.getCPtr(index), index, Period.getCPtr(observationLag), observationLag, observationInterpolation.swigValue(), DayCounter.getCPtr(dayCounter), dayCounter, fixedRate, spread), true);
  }

  public CPICoupon(double baseCPI, Date paymentDate, double nominal, Date startDate, Date endDate, long fixingDays, ZeroInflationIndex index, Period observationLag, CPI.InterpolationType observationInterpolation, DayCounter dayCounter, double fixedRate) {
    this(QuantLibJNI.new_CPICoupon__SWIG_4(baseCPI, Date.getCPtr(paymentDate), paymentDate, nominal, Date.getCPtr(startDate), startDate, Date.getCPtr(endDate), endDate, fixingDays, ZeroInflationIndex.getCPtr(index), index, Period.getCPtr(observationLag), observationLag, observationInterpolation.swigValue(), DayCounter.getCPtr(dayCounter), dayCounter, fixedRate), true);
  }

  public double fixedRate() {
    return QuantLibJNI.CPICoupon_fixedRate(swigCPtr, this);
  }

  public double spread() {
    return QuantLibJNI.CPICoupon_spread(swigCPtr, this);
  }

  public double adjustedFixing() {
    return QuantLibJNI.CPICoupon_adjustedFixing(swigCPtr, this);
  }

  public double baseCPI() {
    return QuantLibJNI.CPICoupon_baseCPI(swigCPtr, this);
  }

  public CPI.InterpolationType observationInterpolation() {
    return CPI.InterpolationType.swigToEnum(QuantLibJNI.CPICoupon_observationInterpolation(swigCPtr, this));
  }

  public ZeroInflationIndex cpiIndex() {
    long cPtr = QuantLibJNI.CPICoupon_cpiIndex(swigCPtr, this);
    return (cPtr == 0) ? null : new ZeroInflationIndex(cPtr, true);
  }

  public void setPricer(CPICouponPricer arg0) {
    QuantLibJNI.CPICoupon_setPricer(swigCPtr, this, CPICouponPricer.getCPtr(arg0), arg0);
  }

}
