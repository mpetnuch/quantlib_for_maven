/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

import java.lang.AutoCloseable;

public class CPICashFlow extends IndexedCashFlow implements AutoCloseable {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected CPICashFlow(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.CPICashFlow_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CPICashFlow obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwnDerived = own;
    super.swigSetCMemOwn(own);
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        QuantLibJNI.delete_CPICashFlow(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  @Override
  public void close() {
   this.delete();
  }

  public CPICashFlow(double notional, ZeroInflationIndex index, Date baseDate, double baseFixing, Date fixingDate, Date paymentDate, boolean growthOnly, CPI.InterpolationType interpolation, Frequency frequency) {
    this(QuantLibJNI.new_CPICashFlow__SWIG_0(notional, ZeroInflationIndex.getCPtr(index), index, Date.getCPtr(baseDate), baseDate, baseFixing, Date.getCPtr(fixingDate), fixingDate, Date.getCPtr(paymentDate), paymentDate, growthOnly, interpolation.swigValue(), frequency.swigValue()), true);
  }

  public CPICashFlow(double notional, ZeroInflationIndex index, Date baseDate, double baseFixing, Date fixingDate, Date paymentDate, boolean growthOnly, CPI.InterpolationType interpolation) {
    this(QuantLibJNI.new_CPICashFlow__SWIG_1(notional, ZeroInflationIndex.getCPtr(index), index, Date.getCPtr(baseDate), baseDate, baseFixing, Date.getCPtr(fixingDate), fixingDate, Date.getCPtr(paymentDate), paymentDate, growthOnly, interpolation.swigValue()), true);
  }

  public CPICashFlow(double notional, ZeroInflationIndex index, Date baseDate, double baseFixing, Date fixingDate, Date paymentDate, boolean growthOnly) {
    this(QuantLibJNI.new_CPICashFlow__SWIG_2(notional, ZeroInflationIndex.getCPtr(index), index, Date.getCPtr(baseDate), baseDate, baseFixing, Date.getCPtr(fixingDate), fixingDate, Date.getCPtr(paymentDate), paymentDate, growthOnly), true);
  }

  public CPICashFlow(double notional, ZeroInflationIndex index, Date baseDate, double baseFixing, Date fixingDate, Date paymentDate) {
    this(QuantLibJNI.new_CPICashFlow__SWIG_3(notional, ZeroInflationIndex.getCPtr(index), index, Date.getCPtr(baseDate), baseDate, baseFixing, Date.getCPtr(fixingDate), fixingDate, Date.getCPtr(paymentDate), paymentDate), true);
  }

  public CPI.InterpolationType interpolation() {
    return CPI.InterpolationType.swigToEnum(QuantLibJNI.CPICashFlow_interpolation(swigCPtr, this));
  }

  public Frequency frequency() {
    return Frequency.swigToEnum(QuantLibJNI.CPICashFlow_frequency(swigCPtr, this));
  }

}
