/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

import java.lang.AutoCloseable;

public class KInterpolatedYoYInflationOptionletVolatilitySurface extends YoYOptionletVolatilitySurface implements AutoCloseable {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected KInterpolatedYoYInflationOptionletVolatilitySurface(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.KInterpolatedYoYInflationOptionletVolatilitySurface_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(KInterpolatedYoYInflationOptionletVolatilitySurface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwnDerived = own;
    super.swigSetCMemOwn(own);
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        QuantLibJNI.delete_KInterpolatedYoYInflationOptionletVolatilitySurface(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  @Override
  public void close() {
   this.delete();
  }

  public KInterpolatedYoYInflationOptionletVolatilitySurface(long settlementDays, Calendar calendar, BusinessDayConvention bdc, DayCounter dc, Period lag, YoYCapFloorTermPriceSurface capFloorPrices, PricingEngine pricer, YoYOptionletStripper yoyOptionletStripper, double slope, Linear interpolator) {
    this(QuantLibJNI.new_KInterpolatedYoYInflationOptionletVolatilitySurface__SWIG_0(settlementDays, Calendar.getCPtr(calendar), calendar, bdc.swigValue(), DayCounter.getCPtr(dc), dc, Period.getCPtr(lag), lag, YoYCapFloorTermPriceSurface.getCPtr(capFloorPrices), capFloorPrices, PricingEngine.getCPtr(pricer), pricer, YoYOptionletStripper.getCPtr(yoyOptionletStripper), yoyOptionletStripper, slope, Linear.getCPtr(interpolator), interpolator), true);
  }

  public KInterpolatedYoYInflationOptionletVolatilitySurface(long settlementDays, Calendar calendar, BusinessDayConvention bdc, DayCounter dc, Period lag, YoYCapFloorTermPriceSurface capFloorPrices, PricingEngine pricer, YoYOptionletStripper yoyOptionletStripper, double slope) {
    this(QuantLibJNI.new_KInterpolatedYoYInflationOptionletVolatilitySurface__SWIG_1(settlementDays, Calendar.getCPtr(calendar), calendar, bdc.swigValue(), DayCounter.getCPtr(dc), dc, Period.getCPtr(lag), lag, YoYCapFloorTermPriceSurface.getCPtr(capFloorPrices), capFloorPrices, PricingEngine.getCPtr(pricer), pricer, YoYOptionletStripper.getCPtr(yoyOptionletStripper), yoyOptionletStripper, slope), true);
  }

  public PairDoubleVector Dslice(Date d) {
    return new PairDoubleVector(QuantLibJNI.KInterpolatedYoYInflationOptionletVolatilitySurface_Dslice(swigCPtr, this, Date.getCPtr(d), d), true);
  }

}
