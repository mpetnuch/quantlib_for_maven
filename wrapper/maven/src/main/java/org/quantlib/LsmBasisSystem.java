/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

import java.lang.AutoCloseable;

public class LsmBasisSystem implements AutoCloseable {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected LsmBasisSystem(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LsmBasisSystem obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(LsmBasisSystem obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_LsmBasisSystem(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  @Override
  public void close() {
   this.delete();
  }

  public LsmBasisSystem() {
    this(QuantLibJNI.new_LsmBasisSystem(), true);
  }

  public final static class PolynomType {
    public final static LsmBasisSystem.PolynomType Monomial = new LsmBasisSystem.PolynomType("Monomial");
    public final static LsmBasisSystem.PolynomType Laguerre = new LsmBasisSystem.PolynomType("Laguerre");
    public final static LsmBasisSystem.PolynomType Hermite = new LsmBasisSystem.PolynomType("Hermite");
    public final static LsmBasisSystem.PolynomType Hyperbolic = new LsmBasisSystem.PolynomType("Hyperbolic");
    public final static LsmBasisSystem.PolynomType Legendre = new LsmBasisSystem.PolynomType("Legendre");
    public final static LsmBasisSystem.PolynomType Chebyshev = new LsmBasisSystem.PolynomType("Chebyshev");
    public final static LsmBasisSystem.PolynomType Chebyshev2nd = new LsmBasisSystem.PolynomType("Chebyshev2nd");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static PolynomType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + PolynomType.class + " with value " + swigValue);
    }

    private PolynomType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private PolynomType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private PolynomType(String swigName, PolynomType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static PolynomType[] swigValues = { Monomial, Laguerre, Hermite, Hyperbolic, Legendre, Chebyshev, Chebyshev2nd };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
