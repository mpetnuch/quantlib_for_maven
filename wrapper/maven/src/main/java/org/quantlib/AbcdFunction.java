/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

import java.lang.AutoCloseable;

public class AbcdFunction extends AbcdMathFunction implements AutoCloseable {
  private transient long swigCPtr;

  protected AbcdFunction(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.AbcdFunction_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AbcdFunction obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(AbcdFunction obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_AbcdFunction(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  @Override
  public void close() {
   this.delete();
  }

  public AbcdFunction(double a, double b, double c, double d) {
    this(QuantLibJNI.new_AbcdFunction__SWIG_0(a, b, c, d), true);
  }

  public AbcdFunction(double a, double b, double c) {
    this(QuantLibJNI.new_AbcdFunction__SWIG_1(a, b, c), true);
  }

  public AbcdFunction(double a, double b) {
    this(QuantLibJNI.new_AbcdFunction__SWIG_2(a, b), true);
  }

  public AbcdFunction(double a) {
    this(QuantLibJNI.new_AbcdFunction__SWIG_3(a), true);
  }

  public AbcdFunction() {
    this(QuantLibJNI.new_AbcdFunction__SWIG_4(), true);
  }

  public double maximumVolatility() {
    return QuantLibJNI.AbcdFunction_maximumVolatility(swigCPtr, this);
  }

  public double shortTermVolatility() {
    return QuantLibJNI.AbcdFunction_shortTermVolatility(swigCPtr, this);
  }

  public double longTermVolatility() {
    return QuantLibJNI.AbcdFunction_longTermVolatility(swigCPtr, this);
  }

  public double covariance(double t, double T, double S) {
    return QuantLibJNI.AbcdFunction_covariance__SWIG_0(swigCPtr, this, t, T, S);
  }

  public double covariance(double t1, double t2, double T, double S) {
    return QuantLibJNI.AbcdFunction_covariance__SWIG_1(swigCPtr, this, t1, t2, T, S);
  }

  public double volatility(double tMin, double tMax, double T) {
    return QuantLibJNI.AbcdFunction_volatility(swigCPtr, this, tMin, tMax, T);
  }

  public double variance(double tMin, double tMax, double T) {
    return QuantLibJNI.AbcdFunction_variance(swigCPtr, this, tMin, tMax, T);
  }

  public double instantaneousVolatility(double t, double T) {
    return QuantLibJNI.AbcdFunction_instantaneousVolatility(swigCPtr, this, t, T);
  }

  public double instantaneousVariance(double t, double T) {
    return QuantLibJNI.AbcdFunction_instantaneousVariance(swigCPtr, this, t, T);
  }

  public double instantaneousCovariance(double u, double T, double S) {
    return QuantLibJNI.AbcdFunction_instantaneousCovariance(swigCPtr, this, u, T, S);
  }

  public double primitive(double t, double T, double S) {
    return QuantLibJNI.AbcdFunction_primitive(swigCPtr, this, t, T, S);
  }

}
