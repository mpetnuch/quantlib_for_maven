/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

import java.lang.AutoCloseable;

public class KahaleSmileSection extends SmileSection implements AutoCloseable {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected KahaleSmileSection(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.KahaleSmileSection_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(KahaleSmileSection obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwnDerived = own;
    super.swigSetCMemOwn(own);
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        QuantLibJNI.delete_KahaleSmileSection(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  @Override
  public void close() {
   this.delete();
  }

  public KahaleSmileSection(SmileSection source, double atm, boolean interpolate, boolean exponentialExtrapolation, boolean deleteArbitragePoints, DoubleVector moneynessGrid, double gap, int forcedLeftIndex, int forcedRightIndex) {
    this(QuantLibJNI.new_KahaleSmileSection__SWIG_0(SmileSection.getCPtr(source), source, atm, interpolate, exponentialExtrapolation, deleteArbitragePoints, DoubleVector.getCPtr(moneynessGrid), moneynessGrid, gap, forcedLeftIndex, forcedRightIndex), true);
  }

  public KahaleSmileSection(SmileSection source, double atm, boolean interpolate, boolean exponentialExtrapolation, boolean deleteArbitragePoints, DoubleVector moneynessGrid, double gap, int forcedLeftIndex) {
    this(QuantLibJNI.new_KahaleSmileSection__SWIG_1(SmileSection.getCPtr(source), source, atm, interpolate, exponentialExtrapolation, deleteArbitragePoints, DoubleVector.getCPtr(moneynessGrid), moneynessGrid, gap, forcedLeftIndex), true);
  }

  public KahaleSmileSection(SmileSection source, double atm, boolean interpolate, boolean exponentialExtrapolation, boolean deleteArbitragePoints, DoubleVector moneynessGrid, double gap) {
    this(QuantLibJNI.new_KahaleSmileSection__SWIG_2(SmileSection.getCPtr(source), source, atm, interpolate, exponentialExtrapolation, deleteArbitragePoints, DoubleVector.getCPtr(moneynessGrid), moneynessGrid, gap), true);
  }

  public KahaleSmileSection(SmileSection source, double atm, boolean interpolate, boolean exponentialExtrapolation, boolean deleteArbitragePoints, DoubleVector moneynessGrid) {
    this(QuantLibJNI.new_KahaleSmileSection__SWIG_3(SmileSection.getCPtr(source), source, atm, interpolate, exponentialExtrapolation, deleteArbitragePoints, DoubleVector.getCPtr(moneynessGrid), moneynessGrid), true);
  }

  public KahaleSmileSection(SmileSection source, double atm, boolean interpolate, boolean exponentialExtrapolation, boolean deleteArbitragePoints) {
    this(QuantLibJNI.new_KahaleSmileSection__SWIG_4(SmileSection.getCPtr(source), source, atm, interpolate, exponentialExtrapolation, deleteArbitragePoints), true);
  }

  public KahaleSmileSection(SmileSection source, double atm, boolean interpolate, boolean exponentialExtrapolation) {
    this(QuantLibJNI.new_KahaleSmileSection__SWIG_5(SmileSection.getCPtr(source), source, atm, interpolate, exponentialExtrapolation), true);
  }

  public KahaleSmileSection(SmileSection source, double atm, boolean interpolate) {
    this(QuantLibJNI.new_KahaleSmileSection__SWIG_6(SmileSection.getCPtr(source), source, atm, interpolate), true);
  }

  public KahaleSmileSection(SmileSection source, double atm) {
    this(QuantLibJNI.new_KahaleSmileSection__SWIG_7(SmileSection.getCPtr(source), source, atm), true);
  }

  public KahaleSmileSection(SmileSection source) {
    this(QuantLibJNI.new_KahaleSmileSection__SWIG_8(SmileSection.getCPtr(source), source), true);
  }

}
